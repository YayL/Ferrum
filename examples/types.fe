struct List<T> {
    const buf: &T
    let size: u32
    let capacity: u32

    fn (self) -> Self {
        self.buf = malloc(#sizeof(t))
        self.capacity = 1
    }

    fn push(self, t: T) {
        if (self.size >= self.capacity) {
            self.capacity *= 2
            self.buf = realloc(self.buf, #sizeof(T) * self.capacity)
        }

        self.buf[self.size++] = t
    }

/*
    fn pop(self, t: T) -> Option<T> {
        if !self.size {
            Some(self.buf[--self.size])
        } else {
            None
        }
    }

    fn slice(self, start: i32, end: i32) -> [_]T {
        self.buf[start..<end]
    }
extra newline needed below because of some lexer issue*/

}

struct Pair<A, B> {
    const first: A
    const second: B

    fn (self, first: A, second: B) -> Self {
        self.first = first
        self.second = second
    }
}

fn main(argc: i32) -> u8 {
    let list: List<i32> = List()

    list.push(1)
    list.push(2)

    list.capacity as u8
}
